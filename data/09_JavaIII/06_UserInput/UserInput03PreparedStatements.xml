<file name="UserInput03PreparedStatements" title="Prepared Statements" toc="UserInputTOC">

    <h1>Prepared Statements</h1>
    <bullet>
        How do we prevent SQL Injection Attacks?
    </bullet>
    <bullet indent="indent-star">
        Modern database tools like Hibernate and MySQL have embedded protections.
    </bullet>
    <bullet indent="indent-star">
        We use Prepared Statements
    </bullet>
    <bullet>
        What is a Prepared Statement?
    </bullet>
    <bullet indent="indent-star">
        A prepared statement is similar to the regular statement object we previously covered, with one key
        difference: it uses placeholders for potentially dangerous values (i.e. value that come from the user).
    </bullet>
    <bullet indent="indent-star">
        <h2>EXAMPLE:</h2>
        <text>
            // First create the statement
            String sql = "SELECT * FROM products WHERE name LIKE ?";
            <br/>
            // Add the wildcards to the search term
            String searchTermWithWildcards = "%" + searchTerm + "%";
            <br/>
            // Create the Prepared Statement object
            PreparedStatement stmt = connection.prepareStatement(sql);
            <br/>
            // set the values for the placeholders
            stmt.setString(1, searchTermWithWildcards);
            <br/>
            // execute the query
            ResultSet rs = stmt.executeQuery();
            while(rs.next()) {
                // do something with the search results
            }
        </text>
    </bullet>
    <bullet>
        <strong>Things to notice:</strong>
    </bullet>
    <bullet indent="indent-star">
        We define the SQL ahead of time and the query is passed to the prepareStatement method, as opposed to being
        passed to executeQuery.
    </bullet>
    <bullet indent="indent-star">
        We defined the query with a placeholder, a ? to indicate where the value will go.
    </bullet>
    <bullet indent="indent-star">
        We used the setString method to safely insert the search term into the query. There are other methods that
        start with .set for the other SQL data types.
    </bullet>
    <bullet>
        <strong>Second example:</strong>
    </bullet>
    <bullet indent="indent-star">
        <text>
            String sql = "INSERT INTO products(name, category, price) VALUES (?, ?, ?)";
            PreparedStatement stmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            <br/>
            // For the sake of easier demonstration we are using literals here
            stmt.setString(1, "hammer"); // set a String
            stmt.setString(2, "tools");
            stmt.setFloat(3, 19.99);     // set a floating point number
            <br/>
            stmt.executeUpdate();
            ResultSet generatedIdResultSet = stmt.getGeneratedKeys();
        </text>
    </bullet>
    <bullet indent="indent-star">
        We pass Statement.RETURN_GENERATED_KEYS in order to obtain the ids that were generated by the database.
    </bullet>
    <strong>Next:</strong>
    <a href="./UserInput04CrossSiteScripting.html" class="btn btn-info">
        Cross Site Scripting
    </a>
</file>