<file name="MySQLIntro" title="Introduction to MySQL" toc="MySQLIntroTOC">
    <img class="lg-img" src="resource/images/MySQL.png" alt=""/>
    <br/>

    <bullet>
        <strong>Lesson Goals</strong>
    </bullet>
    <bullet indent="indent-star">
        Introduce Databases as a concept
    </bullet>
    <bullet indent="indent-star">
        Define database tables
    </bullet>
    <bullet indent="indent-star">
        Introduce SQL
    </bullet>
    <bullet indent="indent-star">
        Explain how to access our MySQL database from the command line
    </bullet>
    <bullet indent="indent-star">
        Explain how to get a different format for query results
    </bullet>
    <bullet>
        What is MySQL
    </bullet>
    <bullet indent="indent-star">
        A Relational Database Management System, or RDBMS.
    </bullet>
    <bullet>
        How does MySQL work?
    </bullet>
    <bullet indent="indent-star">
        It works like a giant spreadsheet application where cells in one sheet
        affects the data on another sheet.
    </bullet>
    <bullet>
        In MySQL the equivalent of the sheet is called a table; and, the data in one table is tied
        to data in the other tables.
    </bullet>
    <bullet>
        We call this tie a relationship. That's why MySQL is called a Relational Database Manager
    </bullet>
    <bullet>
        RDBM's can manage far more data than spreadsheets.
    </bullet>
    <bullet>
        <strong id="queries">Queries</strong>
    </bullet>
    <bullet>
        What are queries?
    </bullet>
    <bullet indent="indent-star">
        Queries are like asking the database a question; like asking for some data or information.
    </bullet>
    <bullet>
        What does SQL stand for?
    </bullet>
    <bullet indent="indent-star">
        Structured Query Language. We use sql to ask the database questions
    </bullet>
    <bullet>
        There are four types of commands
    </bullet>
    <bullet indent="indent-star">
        Data Definition Language (DDL)
    </bullet>
    <bullet indent="indent-star">
        Data Control Language (DCL)
    </bullet>
    <bullet indent="indent-star">
        Data Manipulation Language (DML)
    </bullet>
    <bullet indent="indent-star">
        Data Query Language (DQL)
    </bullet>
    <bullet indent="indent-star">
        Our focus for now will be on DDL and DCL
    </bullet>
    <bullet>
        <strong id="working">Working with MySQL, dudes</strong>
    </bullet>
    <bullet>
        From now through the rest of the course we will be working with databases.
    </bullet>
    <bullet>
        While in real life, this would normally be setup for you. You need to know how to do it, and how it works.
    </bullet>
    <bullet>
        What is a database server?
    </bullet>
    <bullet indent="indent-star">
        A computer application that "serves" data. (Also the computer running the application)
    </bullet>
    <bullet>
        What do you have to do before you can use MySQL?
    </bullet>
    <bullet indent="indent-star">
        Start the server, dude!
    </bullet>
    <bullet indent="indent-star">
        Check the status of the server
        <br/>
        <text>mysql.server status</text>
    </bullet>
    <bullet indent="indent-star">
        Start the server
        <br/>
        <text>mysql.server start</text>
    </bullet>
    <bullet indent="indent-star">
        Whenever you see an error that references communicating with the database, one of the first things you
        should do is make sure the MySQL server is running.
    </bullet>
    <bullet>
        <strong id="using">Using the MySQL Command Line</strong>
    </bullet>
    <bullet>
        MySQL stores information in a series of files, but we will virtually never look
        at or manipulate those files directly
    </bullet>
    <bullet>
        How are we going to access this data?
    </bullet>
    <bullet indent="indent-star">
        We are going to use queries and mysql command line tool.
    </bullet>
    <bullet>
        There are actually two parts to MySQL we will be using.
    </bullet>
    <bullet indent="indent-star">
        The <strong>server</strong> and the
        <strong>client</strong>
    </bullet>
    <bullet indent="indent-star">
        <strong>The Server</strong>
        <br/>
        Understands Structured Query Language (SQL) commands, stores and organizes the data on disk, and users that
        can connect and manipulate the data.
    </bullet>
    <bullet indent="indent-star">
        <strong>The Client</strong>
        <br/>
        Connects to the server for us; sends our commands to the server; and, displays the data on screen.
    </bullet>
    <bullet>
        The command line interface is a client application that runs from the console command line.
    </bullet>
    <bullet>
        We can connect to the MySQL server with the following command:
        <br/>
        <text>mysql -u USERNAME -p</text>
    </bullet>
    <bullet>
        This instructs the MySQL client to connect to the MySQL server using the specified user, and a password.
        After successfully logging in, we should be greeted by the server:
        <br/>
        <text>
            Welcome to the MySQL monitor. Commands end with ; or \g.
            Your MySQL connection id is 65
            Server version: 5.7.14
            <br/>
            Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.
            <br/>
            Oracle is a registered trademark of Oracle Corporation and/or its
            affiliates. Other names may be trademarks of their respective
            owners.
            <br/>
            Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
            <br/>
            mysql>
        </text>
    </bullet>
    <bullet>
        This interface is a lot like the JavaScript console in Chrome. We can issue a SQL command and the
        server and client will respond with the output.
    </bullet>
    <bullet>
        Also like JavaScript, SQL commands are (almost) always ended with a ";".
    </bullet>
    <bullet>
        Conveniently, MySQL has even told us how to get some help. Just type <em>help;</em> and press return.
        Let's see what help MySQL has to offer us.
    </bullet>
    <bullet>
        <text>
            For information about MySQL products and services, visit:
            http://www.mysql.com/
            For developer information, including the MySQL Reference Manual, visit:
            http://dev.mysql.com/
            To buy MySQL Enterprise support, training, or other products, visit:
            https://shop.mysql.com/
            <br/>
            List of all MySQL commands:
            Note that all text commands must be first on line and end with ';'
            ? (\?) Synonym for `help'.
            clear (\c) Clear the current input statement.
            connect (\r) Reconnect to the server. Optional arguments are db and host.
            delimiter (\d) Set statement delimiter.
            edit (\e) Edit command with $EDITOR.
            ego (\G) Send command to mysql server, display result vertically.
            exit (\q) Exit mysql. Same as quit.
            go (\g) Send command to mysql server.
            help (\h) Display this help.
            nopager (\n) Disable pager, print to stdout.
            notee (\t) Don't write into outfile.
            pager (\P) Set PAGER [to_pager]. Print the query results via PAGER.
            print (\p) Print current command.
            prompt (\R) Change your mysql prompt.
            quit (\q) Quit mysql.
            rehash (\#) Rebuild completion hash.
            source (\.) Execute an SQL script file. Takes a file name as an argument.
            status (\s) Get status information from the server.
            system (\!) Execute a system shell command.
            tee (\T) Set outfile [to_outfile]. Append everything into given outfile.
            use (\u) Use another database. Takes database name as argument.
            charset (\C) Switch to another charset. Might be needed for processing binlog with multi-byte charsets.
            warnings (\W) Show warnings after every statement.
            nowarning (\w) Don't show warnings after every statement.
            <br/>
            For server side help, type 'help contents'
        </text>
    </bullet>
    <bullet>
        These are the commands and options the MySQL client understands. For information on server commands we can use
        <em>help contents</em>.
    </bullet>
    <bullet>
        <text>
            You asked for help about help category: "Contents"
            For more information, type 'help {item}', where {item} is one of the following
            categories:
            Account Management
            Administration
            Compound Statements
            Data Definition
            Data Manipulation
            Data Types
            Functions
            Functions and Modifiers for Use with GROUP BY
            Geographic Features
            Help Metadata
            Language Structure
            Plugins
            Procedures
            Storage Engines
            Table Maintenance
            Transactions
            User-Defined Functions
            Utility
        </text>
    </bullet>
    <bullet>
        Most of our output from MySQL will be formatted in a table. Something similar to:<br/>
        <text>
            +----+----------+----------+----------+
            | id | Column 1 | Column 2 | Column 3 |
            +---------------+----------+----------+
            |  1 | Value A  | Value B  | Value C  |
            |  2 | Value D  | Value E  | Value F  |
            |  3 | Value G  | Value H  | Value I  |
            |  4 | Value J  | Value K  | Value L  |
            +----+----------+----------+----------+
        </text>
    </bullet>
    <bullet>
        This is the default layout, but it is not always the best.
    </bullet>
    <bullet>
        Usually SQL statments end with <em>;</em>, but you can use other line terminators to get other output formats.
    </bullet>
    <bullet>
        If you use <em>\G</em> The output would look like this.<br/>
        <text>
            *************************** 1. row ***************************
            id: 1
            Column 1: Value A
            Column 2: Value B
            Column 3: Value C
            *************************** 2. row ***************************
            id: 2
            Column 1: Value D
            Column 2: Value E
            Column 3: Value F
            *************************** 3. row ***************************
            id: 3
            Column 1: Value G
            Column 2: Value H
            Column 3: Value I
            *************************** 4. row ***************************
            id: 4
            Column 1: Value J
            Column 2: Value K
            Column 3: Value L
        </text>
    </bullet>
    <bullet>
        Finally, we need some way to leave the MySQL client. Thankfully, it's simply running <em>exit;</em>
    </bullet>
    <bullet>
        At this point, you should be back out in your shell. Now you know how to start the MySQL client, issue
        commands, and tweak the output. Next up, we will discuss creating users.
    </bullet>
    <br/>
    <strong>Next:</strong> <a href="https://java.codeup.com/mysql/introduction/#exercises" class="btn btn-info" >Exercises</a>
</file>
